<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShaoJundaのBlog</title>
  <icon>https://www.gravatar.com/avatar/b7a9ee83df99d8176d1dd1c37e00fb47</icon>
  <subtitle>Stay hungry, Stay foolish.</subtitle>
  <link href="https://shaojunda.me/atom.xml" rel="self"/>
  
  <link href="https://shaojunda.me/"/>
  <updated>2020-11-29T16:55:54.136Z</updated>
  <id>https://shaojunda.me/</id>
  
  <author>
    <name>shaojunda</name>
    <email>shaojunda@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>effective-go-notes-01</title>
    <link href="https://shaojunda.me/effective-go-notes-01.html"/>
    <id>https://shaojunda.me/effective-go-notes-01.html</id>
    <published>2020-11-29T11:59:46.000Z</published>
    <updated>2020-11-29T16:55:54.136Z</updated>
    
    <content type="html"><![CDATA[<p>想要写好 Go 代码不仅需要理解 Go 的特性和风格，还需要了解 Go 的命名、格式化以及项目结构等约定。</p><h2 id="格式化（Formatting）"><a href="#格式化（Formatting）" class="headerlink" title="格式化（Formatting）"></a>格式化（Formatting）</h2><p>Go 使用 <code>go fmt</code> 格式化代码，这样开发者就不用纠结诸如缩进等问题了</p><p>before:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span> <span class="comment">// name of the object</span></span><br><span class="line">    value <span class="keyword">int</span> <span class="comment">// its value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>after:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    name    <span class="keyword">string</span> <span class="comment">// name of the object</span></span><br><span class="line">    value   <span class="keyword">int</span>    <span class="comment">// its value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="注释（Commentary）"><a href="#注释（Commentary）" class="headerlink" title="注释（Commentary）"></a>注释（Commentary）</h2><p>每个 package 最好都有一个 <code>package comment</code>，对于有多个文件的 package 只需要在其中一个文件中加入 <code>package comment</code> 就可以了。</p><ul><li>多行注释</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Package regexp implements a simple library for regular expressions.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The syntax of the regular expressions accepted is:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    regexp:</span></span><br><span class="line"><span class="comment">        concatenation &#123; &#x27;|&#x27; concatenation &#125;</span></span><br><span class="line"><span class="comment">    concatenation:</span></span><br><span class="line"><span class="comment">        &#123; closure &#125;</span></span><br><span class="line"><span class="comment">    closure:</span></span><br><span class="line"><span class="comment">        term [ &#x27;*&#x27; | &#x27;+&#x27; | &#x27;?&#x27; ]</span></span><br><span class="line"><span class="comment">    term:</span></span><br><span class="line"><span class="comment">        &#x27;^&#x27;</span></span><br><span class="line"><span class="comment">        &#x27;$&#x27;</span></span><br><span class="line"><span class="comment">        &#x27;.&#x27;</span></span><br><span class="line"><span class="comment">        character</span></span><br><span class="line"><span class="comment">        &#x27;[&#x27; [ &#x27;^&#x27; ] character-ranges &#x27;]&#x27;</span></span><br><span class="line"><span class="comment">        &#x27;(&#x27; regexp &#x27;)&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> regexp</span><br></pre></td></tr></table></figure><ul><li>单行注释</li></ul><p>如果一个包非常简单那么可以用单行注释来简单说明一下这个包的作用。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package path implements utility routines for</span></span><br><span class="line"><span class="comment">// manipulating slash-separated filename paths.</span></span><br></pre></td></tr></table></figure><p>在一个包中，任何紧接在顶层声明之前的注释都可以作为该声明的文档注释。每一个对外暴露的方法（首字母大写的方法）都应该有相应的注释。文档注释最好是完整的句子，第一句话应该是单句的摘要，以所声明的名称开头。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compile parses a regular expression and returns, if successful,</span></span><br><span class="line"><span class="comment">// a Regexp that can be used to match against text.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Compile</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="params">(*Regexp, error)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>使用文档注释可以方便我们检索文档，找到对应包下的某个方法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go doc -all regexp | grep -i parse</span></span><br><span class="line">    Compile parses a regular expression and returns, if successful, a Regexp</span><br><span class="line">    MustCompile is like Compile but panics if the expression cannot be parsed.</span><br><span class="line">    parsed. It simplifies safe initialization of global variables holding</span><br><span class="line"><span class="meta">$</span></span><br></pre></td></tr></table></figure><p>可以使用一条简单文档注释来对一组声明进行注释。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Error codes returned by failures to parse an expression.</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    ErrInternal      = errors.New(<span class="string">&quot;regexp: internal error&quot;</span>)</span><br><span class="line">    ErrUnmatchedLpar = errors.New(<span class="string">&quot;regexp: unmatched &#x27;(&#x27;&quot;</span>)</span><br><span class="line">    ErrUnmatchedRpar = errors.New(<span class="string">&quot;regexp: unmatched &#x27;)&#x27;&quot;</span>)</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>分组有可以表示出元素之间的关系，比如一组变量是由一个 <code>mutex</code> 保护。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    countLock   sync.Mutex</span><br><span class="line">    inputCount  <span class="keyword">uint32</span></span><br><span class="line">    outputCount <span class="keyword">uint32</span></span><br><span class="line">    errorCount  <span class="keyword">uint32</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="命名规范（Naming-conventions）"><a href="#命名规范（Naming-conventions）" class="headerlink" title="命名规范（Naming conventions）"></a>命名规范（Naming conventions）</h2><p>命名不仅仅在 Go 中很重要在其他语言中也很重要，在 Go 中它甚至会有语义上的影响：一个名字在包外的可见性取决于它的第一个字符是否是大写的。</p><h3 id="Package-names"><a href="#Package-names" class="headerlink" title="Package names"></a>Package names</h3><p>当导入一个 package 之后这个 package 的名字将成为你调用它内容的访问器</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;bytes&quot;</span></span><br><span class="line"></span><br><span class="line">bytes.Buffer</span><br></pre></td></tr></table></figure><p>好的 package 名称应该是「简短且易于理解的」，通常来说 package 名称应该是：</p><ul><li>小写的单字名称且不应使用下划线或驼峰记法</li><li>package 名称是源目录最里层的名称，比如： src/encoding/base64 package 名称是 base64</li></ul><p>package 名称可以简化其内部内容的命名，比如 buffered reader type 在 <code>bufio</code> package 中只叫 <code>Reader</code> 而不是 <code>BufReader</code>，因为使用者是这样引用的 <code>bufio.Reader</code>，这已经足够清晰且简洁地表达意图了。且 <code>bufio.Reader</code> 也不会和 <code>io.Reader</code> 混淆，因为可以通过 package 名称进行区分。再比如用来创建 <code>ring.Ring</code> 对象的方法可以是 <code>ring.NewRing</code> 更简洁一点可以直接是 <code>ring.New</code> 应为 package 名称刚好也是「ring」。另一个简洁的命名是 <code>once.Do(setup)</code> 其可读性已经很好，使用 once.DoOrWaitUntilDone(setup) 并不会使其变得更好。长命名并不会使其变得更容易理解。一份有用的说明文档通常比额外的长名字更有价值。</p><h3 id="存取器（Getters-and-Setters）"><a href="#存取器（Getters-and-Setters）" class="headerlink" title="存取器（Getters and Setters）"></a>存取器（Getters and Setters）</h3><p>Go 没有对存取器提供自动的支持，需要我们手动添加。假设你有一个对象</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">  owner <span class="keyword">string</span></span><br><span class="line">  color <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 owner getter 的命名，叫 <code>Owner()</code> 就很好，对于 owner setter 的命名可以是 <code>SetOwner()</code>。</p><h3 id="接口命名（interface-names）"><a href="#接口命名（interface-names）" class="headerlink" title="接口命名（interface names）"></a>接口命名（interface names）</h3><p>按照约定，只包含一个方法的接口应当以该方法的名称加上 -er 后缀来命名，如 Reader、Writer、 Formatter、CloseNotifier 等。</p><h3 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h3><p>最后，Go 中约定使用驼峰记法 MixedCaps 或 mixedCaps 的方式来对多单词名称进行命名。</p><h2 id="分号（Semicolons）"><a href="#分号（Semicolons）" class="headerlink" title="分号（Semicolons）"></a>分号（Semicolons）</h2><p>Go 虽然也是使用分号来结束语句，但是不需要在源码中手动输入，词法分析器会自动加上分号。如果在一行中写多个语句，需要用分号隔开。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init statement</span></span><br><span class="line"><span class="comment">// condition expression</span></span><br><span class="line"><span class="comment">// post statement</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num := <span class="number">9</span>; num &lt; <span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(num, <span class="string">&quot;is negative&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能将一个控制结构（if、for、switch 或 select）的左打括号不能另起一行因为词法分析器会在大括号前面插入分号，这可能引起不需要的效果。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 应该是：</span></span><br><span class="line"><span class="keyword">if</span> i &lt; f() &#123;</span><br><span class="line">    g()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 而不是：</span></span><br><span class="line"><span class="keyword">if</span> i &lt; f()  <span class="comment">// wrong!</span></span><br><span class="line">&#123;           <span class="comment">// wrong!</span></span><br><span class="line">    g()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">effective-go 笔记01</summary>
    
    
    
    
    <category term="golang" scheme="https://shaojunda.me/tags/golang/"/>
    
    <category term="programing" scheme="https://shaojunda.me/tags/programing/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云轻量应用服务器 SSH 配置</title>
    <link href="https://shaojunda.me/tencent-lighthouse-get-started.html"/>
    <id>https://shaojunda.me/tencent-lighthouse-get-started.html</id>
    <published>2020-11-24T16:57:53.000Z</published>
    <updated>2020-11-25T15:43:27.261Z</updated>
    
    <content type="html"><![CDATA[<p>今年双十一在腾讯云买了一台 1 核 2 G 3M 的轻量应用服务器，3 年 253 感觉做一些简单的服务和测试应该够用了。记录一下通过 SSH 连接轻量云服务器的步骤。</p><h2 id="重制密码"><a href="#重制密码" class="headerlink" title="重制密码"></a>重制密码</h2><ol><li>登陆服务控制台</li><li>在服务器列表中找到相应的实例</li><li>关机</li><li>在「实例信息」栏中点击「重置密码」</li></ol><h2 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h2><ol><li>登录轻量应用服务器控制台，并单击左侧导航栏中的「密钥」</li><li>在密钥列表页面，单击「创建密钥」</li><li>在弹出的「创建SSH密钥」窗口中，设置密钥的所属地域，选择密钥的创建方式，单击「确定」</li><li>在密钥列表选择要绑定的 ssh 密钥，单击「绑定/解绑实例」</li><li>下载密钥文件到本地</li></ol><h2 id="配置-ssh"><a href="#配置-ssh" class="headerlink" title="配置 ssh"></a>配置 ssh</h2><p>修改 ssh 配置文件 <code>~/.ssh/config</code> 增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host light</span><br><span class="line">    HostName 「公网 IP」</span><br><span class="line">    port 22</span><br><span class="line">    User 「用户名」</span><br><span class="line">    IdentityFile 「密钥文件路径」</span><br><span class="line">    TCPKeepAlive yes</span><br><span class="line">    ForwardAgent yes</span><br></pre></td></tr></table></figure><h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p>更新好 ssh 配置文件之后即可通过命令行登陆到服务器 <code>ssh light</code></p><p>从购买到配置整体感觉比阿里云更容易上手，指引也更明确。</p>]]></content>
    
    
    <summary type="html">腾讯云轻量应用服务器 SSH 配置</summary>
    
    
    
    <category term="环境搭建" scheme="https://shaojunda.me/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="ssh" scheme="https://shaojunda.me/tags/ssh/"/>
    
    <category term="服务器" scheme="https://shaojunda.me/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
</feed>
