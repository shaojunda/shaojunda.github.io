<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ssh 使用 pem 文件登录远程服务器</title>
      <link href="use-pem-login-remote-server.html"/>
      <url>use-pem-login-remote-server.html</url>
      
        <content type="html"><![CDATA[<p>今天尝试了一些 AWS 的 Lightsail 发现它的 ssh 是需要使用 pem 文件进行远程登录的，记录一下登录方式。<br>以我申请到的账号为例：</p><ul><li>用户名: ubuntu</li><li>IP: 192.168.1.101 （举例）</li><li>pem name: LightsailDefaultKey-ap-northeast-1.pem</li></ul><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><ul><li><p><code>ssh -i LightsailDefaultKey-ap-northeast-1.pem ubuntu@192.168.1.101</code></p><a id="more"></a><p>执行后报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">Permissions 0644 for &#39;LightsailDefaultKey-ap-northeast-1.pem&#39; are too open.</span><br><span class="line">It is required that your private key files are NOT accessible by others.</span><br><span class="line">This private key will be ignored.</span><br><span class="line">Load key &quot;LightsailDefaultKey-ap-northeast-1.pem&quot;: bad permissions</span><br><span class="line">ubuntu@192.168.1.101: Permission denied (publickey).</span><br></pre></td></tr></table></figure></li><li><p>执行 <code>chmod 0600 LightsailDefaultKey-ap-northeast-1.pem</code> 后上述报错会消失</p></li><li><p>执行 <code>ssh-add -K LightsailDefaultKey-ap-northeast-1.pem</code></p></li></ul><p>之后就可以通过 <code>ssh ubuntu@192.168.1.101</code> 登录到远程服务器了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debug Go 程序入门介绍之 Delve 篇</title>
      <link href="debug-go-program-getting-started.html"/>
      <url>debug-go-program-getting-started.html</url>
      
        <content type="html"><![CDATA[<p>今天简单了解了一下 <a href="https://github.com/go-delve/delve">Delve</a> 这个 go 语言调试工具，和两个 go 编译和反编译命令 <code>go tool compile</code> 和 <code>go tool objdump</code> 还是挺有意思的。这篇文章会介绍一下 Delve 的使用方式。(以下内容的运行环境均为 Linux)</p><h2 id="Delve"><a href="#Delve" class="headerlink" title="Delve"></a>Delve</h2><p>安装方式请参考 <a href="https://github.com/go-delve/delve/tree/master/Documentation/installation">installation</a></p><p>先以 <code>hello world</code> 程序为例我们看一下 dlv 的使用</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>go build hello.go</code> 编译 <code>hello.go</code> 文件得到可执行文件 <code>hello</code>。</p><p>执行 <code>readelf -h ./hello</code> 可得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@4158ddf6b44d home]# readelf -h .&#x2F;hello</span><br><span class="line">ELF Header:</span><br><span class="line">Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00</span><br><span class="line">Class:                             ELF64</span><br><span class="line">Data:                              2&#39;s complement, little endian</span><br><span class="line">Version:                           1 (current)</span><br><span class="line">OS&#x2F;ABI:                            UNIX - System V</span><br><span class="line">ABI Version:                       0</span><br><span class="line">Type:                              EXEC (Executable file)</span><br><span class="line">Machine:                           Advanced Micro Devices X86-64</span><br><span class="line">Version:                           0x1</span><br><span class="line">Entry point address:               0x455780</span><br><span class="line">Start of program headers:          64 (bytes into file)</span><br><span class="line">Start of section headers:          456 (bytes into file)</span><br><span class="line">Flags:                             0x0</span><br><span class="line">Size of this header:               64 (bytes)</span><br><span class="line">Size of program headers:           56 (bytes)</span><br><span class="line">Number of program headers:         7</span><br><span class="line">Size of section headers:           64 (bytes)</span><br><span class="line">Number of section headers:         25</span><br><span class="line">Section header string table index: 3</span><br></pre></td></tr></table></figure><p>可以看到 <code>Entry point address: 0x455780</code> 这个就是 <code>hello.go</code> 程序的执行入口。接下来使用 <code>dlv</code> 对 <code>hello.go</code> 程序进行调试。</p><p>执行 <code>dlv exec ./hello</code> 会进入到调试模式</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@4158ddf6b44d home]# dlv exec .&#x2F;hello</span><br><span class="line">Type &#39;help&#39; for list of commands.</span><br><span class="line">(dlv)</span><br></pre></td></tr></table></figure><p>输入 <code>help</code> 可以看到可用的命令列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">(dlv) help</span><br><span class="line">The following commands are available:</span><br><span class="line"></span><br><span class="line">Running the program:</span><br><span class="line">    call ------------------------ Resumes process, injecting a function call (EXPERIMENTAL!!!)</span><br><span class="line">    continue (alias: c) --------- Run until breakpoint or program termination.</span><br><span class="line">    next (alias: n) ------------- Step over to next source line.</span><br><span class="line">    restart (alias: r) ---------- Restart process.</span><br><span class="line">    step (alias: s) ------------- Single step through program.</span><br><span class="line">    step-instruction (alias: si)  Single step a single cpu instruction.</span><br><span class="line">    stepout (alias: so) --------- Step out of the current function.</span><br><span class="line"></span><br><span class="line">Manipulating breakpoints:</span><br><span class="line">    break (alias: b) ------- Sets a breakpoint.</span><br><span class="line">    breakpoints (alias: bp)  Print out info for active breakpoints.</span><br><span class="line">    clear ------------------ Deletes breakpoint.</span><br><span class="line">    clearall --------------- Deletes multiple breakpoints.</span><br><span class="line">    condition (alias: cond)  Set breakpoint condition.</span><br><span class="line">    on --------------------- Executes a command when a breakpoint is hit.</span><br><span class="line">    trace (alias: t) ------- Set tracepoint.</span><br><span class="line"></span><br><span class="line">Viewing program variables and memory:</span><br><span class="line">    args ----------------- Print function arguments.</span><br><span class="line">    display -------------- Print value of an expression every time the program stops.</span><br><span class="line">    examinemem (alias: x)  Examine memory:</span><br><span class="line">    locals --------------- Print local variables.</span><br><span class="line">    print (alias: p) ----- Evaluate an expression.</span><br><span class="line">    regs ----------------- Print contents of CPU registers.</span><br><span class="line">    set ------------------ Changes the value of a variable.</span><br><span class="line">    vars ----------------- Print package variables.</span><br><span class="line">    whatis --------------- Prints type of an expression.</span><br><span class="line"></span><br><span class="line">Listing and switching between threads and goroutines:</span><br><span class="line">    goroutine (alias: gr) -- Shows or changes current goroutine</span><br><span class="line">    goroutines (alias: grs)  List program goroutines.</span><br><span class="line">    thread (alias: tr) ----- Switch to the specified thread.</span><br><span class="line">    threads ---------------- Print out info for every traced thread.</span><br><span class="line"></span><br><span class="line">Viewing the call stack and selecting frames:</span><br><span class="line">    deferred --------- Executes command in the context of a deferred call.</span><br><span class="line">    down ------------- Move the current frame down.</span><br><span class="line">    frame ------------ Set the current frame, or execute command on a different frame.</span><br><span class="line">    stack (alias: bt)  Print stack trace.</span><br><span class="line">    up --------------- Move the current frame up.</span><br><span class="line"></span><br><span class="line">Other commands:</span><br><span class="line">    config --------------------- Changes configuration parameters.</span><br><span class="line">    disassemble (alias: disass)  Disassembler.</span><br><span class="line">    edit (alias: ed) ----------- Open where you are in $DELVE_EDITOR or $EDITOR</span><br><span class="line">    exit (alias: quit | q) ----- Exit the debugger.</span><br><span class="line">    funcs ---------------------- Print list of functions.</span><br><span class="line">    help (alias: h) ------------ Prints the help message.</span><br><span class="line">    libraries ------------------ List loaded dynamic libraries</span><br><span class="line">    list (alias: ls | l) ------- Show source code.</span><br><span class="line">    source --------------------- Executes a file containing a list of delve commands</span><br><span class="line">    sources -------------------- Print list of source files.</span><br><span class="line">    types ---------------------- Print list of types</span><br><span class="line"></span><br><span class="line">Type help followed by a command for full documentation.</span><br></pre></td></tr></table></figure><p>这里我主要使用 <code>b</code>, <code>c</code>, <code>si</code>, <code>bt</code> 来感受以下 <code>dlv</code> 的使用。</p><p>首先输入 <code>b *0x455780</code> 在程序入口处打一个断点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(dlv) b *0x455780</span><br><span class="line">Breakpoint 1 set at 0x455780 for _rt0_amd64_linux() &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;rt0_linux_amd64.s:8</span><br></pre></td></tr></table></figure><p>结下来输入 <code>c</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(dlv) c</span><br><span class="line">&gt; _rt0_amd64_linux() &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;rt0_linux_amd64.s:8 (hits total:1) (PC: 0x455780)</span><br><span class="line">Warning: debugging optimized function</span><br><span class="line">     3: &#x2F;&#x2F; license that can be found in the LICENSE file.</span><br><span class="line">     4:</span><br><span class="line">     5: #include &quot;textflag.h&quot;</span><br><span class="line">     6:</span><br><span class="line">     7: TEXT _rt0_amd64_linux(SB),NOSPLIT,$-8</span><br><span class="line">&#x3D;&gt;   8:         JMP     _rt0_amd64(SB)</span><br><span class="line">     9:</span><br><span class="line">    10: TEXT _rt0_amd64_linux_lib(SB),NOSPLIT,$0</span><br><span class="line">    11:         JMP     _rt0_amd64_lib(SB)</span><br><span class="line">(dlv)</span><br></pre></td></tr></table></figure><p>可以看出执行到了 <code>JMP     _rt0_amd64(SB)</code> 这条汇编指令。我们可以输入 <code>si</code> 来继续执行下一条汇编指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(dlv) si</span><br><span class="line">&gt; _rt0_amd64() &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;asm_amd64.s:15 (PC: 0x451bd0)</span><br><span class="line">Warning: debugging optimized function</span><br><span class="line">    10: &#x2F;&#x2F; _rt0_amd64 is common startup code for most amd64 systems when using</span><br><span class="line">    11: &#x2F;&#x2F; internal linking. This is the entry point for the program from the</span><br><span class="line">    12: &#x2F;&#x2F; kernel for an ordinary -buildmode&#x3D;exe program. The stack holds the</span><br><span class="line">    13: &#x2F;&#x2F; number of arguments and the C-style argv.</span><br><span class="line">    14: TEXT _rt0_amd64(SB),NOSPLIT,$-8</span><br><span class="line">&#x3D;&gt;  15:         MOVQ    0(SP), DI       &#x2F;&#x2F; argc</span><br><span class="line">    16:         LEAQ    8(SP), SI       &#x2F;&#x2F; argv</span><br><span class="line">    17:         JMP     runtime·rt0_go(SB)</span><br><span class="line">    18:</span><br><span class="line">    19: &#x2F;&#x2F; main is common startup code for most amd64 systems when using</span><br><span class="line">    20: &#x2F;&#x2F; external linking. The C startup code will call the symbol &quot;main&quot;</span><br><span class="line">(dlv)</span><br></pre></td></tr></table></figure><p>这样我们就进入到了 <code>rt0_amd64</code> 内部，继续执行三次 <code>si</code> 可以看到程序进入到了 <code>runtime·rt0_go</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(dlv) si</span><br><span class="line">&gt; runtime.rt0_go() &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;asm_amd64.s:89 (PC: 0x451be0)</span><br><span class="line">Warning: debugging optimized function</span><br><span class="line">    84: DATA _rt0_amd64_lib_argv&lt;&gt;(SB)&#x2F;8, $0</span><br><span class="line">    85: GLOBL _rt0_amd64_lib_argv&lt;&gt;(SB),NOPTR, $8</span><br><span class="line">    86:</span><br><span class="line">    87: TEXT runtime·rt0_go(SB),NOSPLIT,$0</span><br><span class="line">    88:         &#x2F;&#x2F; copy arguments forward on an even stack</span><br><span class="line">&#x3D;&gt;  89:         MOVQ    DI, AX          &#x2F;&#x2F; argc</span><br><span class="line">    90:         MOVQ    SI, BX          &#x2F;&#x2F; argv</span><br><span class="line">    91:         SUBQ    $(4*8+7), SP            &#x2F;&#x2F; 2args 2auto</span><br><span class="line">    92:         ANDQ    $~15, SP</span><br><span class="line">    93:         MOVQ    AX, 16(SP)</span><br><span class="line">    94:         MOVQ    BX, 24(SP)</span><br><span class="line">(dlv)</span><br></pre></td></tr></table></figure><p>在 <code>runtime·rt0_go</code> 中进行诸如初始化等操后会执行 <code>hello.go</code> 的 <code>main</code> 函数。</p><h2 id="调试向已关闭的-channel-写数据"><a href="#调试向已关闭的-channel-写数据" class="headerlink" title="调试向已关闭的 channel 写数据"></a>调试向已关闭的 channel 写数据</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test1.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">ch &lt;- <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这段程序我们运行 <code>go run test1.go</code> 会得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@4158ddf6b44d home]# go run test.go</span><br><span class="line">panic: send on closed channel</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">main.main()</span><br><span class="line">        &#x2F;home&#x2F;test.go:6 +0x63</span><br><span class="line">exit status 2</span><br></pre></td></tr></table></figure><p>这时我们可以使用 dlv 来查看具体是在哪一行 panic 的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@4158ddf6b44d home]# dlv exec .&#x2F;test</span><br><span class="line">Type &#39;help&#39; for list of commands.</span><br><span class="line">(dlv) c</span><br><span class="line">&gt; [unrecovered-panic] runtime.fatalpanic() &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;panic.go:1189 (hits goroutine(1):1 total:1) (PC: 0x429e30)</span><br><span class="line">Warning: debugging optimized function</span><br><span class="line">        runtime.curg._panic.arg: interface &#123;&#125;(string) &quot;send on closed channel&quot;</span><br><span class="line">  1184: &#x2F;&#x2F; fatalpanic implements an unrecoverable panic. It is like fatalthrow, except</span><br><span class="line">  1185: &#x2F;&#x2F; that if msgs !&#x3D; nil, fatalpanic also prints panic messages and decrements</span><br><span class="line">  1186: &#x2F;&#x2F; runningPanicDefers once main is blocked from exiting.</span><br><span class="line">  1187: &#x2F;&#x2F;</span><br><span class="line">  1188: &#x2F;&#x2F;go:nosplit</span><br><span class="line">&#x3D;&gt;1189: func fatalpanic(msgs *_panic) &#123;</span><br><span class="line">  1190:         pc :&#x3D; getcallerpc()</span><br><span class="line">  1191:         sp :&#x3D; getcallersp()</span><br><span class="line">  1192:         gp :&#x3D; getg()</span><br><span class="line">  1193:         var docrash bool</span><br><span class="line">  1194:         &#x2F;&#x2F; Switch to the system stack to avoid any stack growth, which</span><br><span class="line">(dlv)</span><br></pre></td></tr></table></figure><p>在这里输入 <code>bt</code> 可以查看调用栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(dlv) bt</span><br><span class="line">0  0x0000000000429e30 in runtime.fatalpanic</span><br><span class="line">   at &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;panic.go:1189</span><br><span class="line">1  0x00000000004298ad in runtime.gopanic</span><br><span class="line">   at &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;panic.go:1064</span><br><span class="line">2  0x00000000004041b3 in runtime.chansend</span><br><span class="line">   at &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;chan.go:187</span><br><span class="line">3  0x0000000000403bc5 in runtime.chansend1</span><br><span class="line">   at &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;chan.go:127</span><br><span class="line">4  0x00000000004587d3 in main.main</span><br><span class="line">   at .&#x2F;test.go:6</span><br><span class="line">5  0x000000000042c2ba in runtime.main</span><br><span class="line">   at &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;proc.go:203</span><br><span class="line">6  0x0000000000453d91 in runtime.goexit</span><br><span class="line">   at &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;asm_amd64.s:1373</span><br><span class="line">(dlv)</span><br></pre></td></tr></table></figure><p>这里可以看到是 <code>runtime.chansend</code> panic 了，这是可以输入 <code>up 2</code> 可以看到 panic 的具体位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(dlv) up 2</span><br><span class="line">&gt; [unrecovered-panic] runtime.fatalpanic() &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;panic.go:1189 (hits goroutine(1):1 total:1) (PC: 0x429e30)</span><br><span class="line">Warning: debugging optimized function</span><br><span class="line">Frame 2: &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;chan.go:187 (PC: 4041b3)</span><br><span class="line">   182:</span><br><span class="line">   183:         lock(&amp;c.lock)</span><br><span class="line">   184:</span><br><span class="line">   185:         if c.closed !&#x3D; 0 &#123;</span><br><span class="line">   186:                 unlock(&amp;c.lock)</span><br><span class="line">&#x3D;&gt; 187:                 panic(plainError(&quot;send on closed channel&quot;))</span><br><span class="line">   188:         &#125;</span><br><span class="line">   189:</span><br><span class="line">   190:         if sg :&#x3D; c.recvq.dequeue(); sg !&#x3D; nil &#123;</span><br><span class="line">   191:                 &#x2F;&#x2F; Found a waiting receiver. We pass the value we want to send</span><br><span class="line">   192:                 &#x2F;&#x2F; directly to the receiver, bypassing the channel buffer (if any).</span><br><span class="line">(dlv)</span><br></pre></td></tr></table></figure><p>再次输入两次 <code>up</code> 得到如下输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(dlv) up</span><br><span class="line">&gt; [unrecovered-panic] runtime.fatalpanic() &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;panic.go:1189 (hits goroutine(1):1 total:1) (PC: 0x429e30)</span><br><span class="line">Warning: debugging optimized function</span><br><span class="line">Frame 3: &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;chan.go:127 (PC: 403bc5)</span><br><span class="line">   122: &#125;</span><br><span class="line">   123:</span><br><span class="line">   124: &#x2F;&#x2F; entry point for c &lt;- x from compiled code</span><br><span class="line">   125: &#x2F;&#x2F;go:nosplit</span><br><span class="line">   126: func chansend1(c *hchan, elem unsafe.Pointer) &#123;</span><br><span class="line">&#x3D;&gt; 127:         chansend(c, elem, true, getcallerpc())</span><br><span class="line">   128: &#125;</span><br><span class="line">   129:</span><br><span class="line">   130: &#x2F;*</span><br><span class="line">   131:  * generic single channel send&#x2F;recv</span><br><span class="line">   132:  * If block is not nil,</span><br><span class="line">(dlv)</span><br><span class="line">(dlv) up</span><br><span class="line">&gt; [unrecovered-panic] runtime.fatalpanic() &#x2F;usr&#x2F;lib&#x2F;golang&#x2F;src&#x2F;runtime&#x2F;panic.go:1189 (hits goroutine(1):1 total:1) (PC: 0x429e30)</span><br><span class="line">Warning: debugging optimized function</span><br><span class="line">Frame 4: .&#x2F;test.go:6 (PC: 4587d3)</span><br><span class="line">     1: package main</span><br><span class="line">     2:</span><br><span class="line">     3: func main() &#123;</span><br><span class="line">     4:         ch :&#x3D; make(chan int)</span><br><span class="line">     5:         close(ch)</span><br><span class="line">&#x3D;&gt;   6:         ch &lt;- 1</span><br><span class="line">     7: &#125;</span><br><span class="line">(dlv)</span><br></pre></td></tr></table></figure><p>到此我们可以看到是在 <code>main</code> 函数第 6 行向 channel 里写数据导致的 panic， 具体 panic 是在 <code>/usr/lib/golang/src/runtime/chan.go:187</code> 处执行的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>dlv 的使用还是挺简单的，目前主要用到了</p><ul><li>b 打断点</li><li>c 继续执行</li><li>bt 打印 stack trace</li><li>si 执行一条汇编语句</li><li>r 重新执行</li><li>up <code>[&lt;m&gt;]</code> 向上移动 m 个 frame</li><li>down <code>[&lt;m&gt;]</code> 向下移动 m 个 frame<br></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> programing </tag>
            
            <tag> golang </tag>
            
            <tag> dlv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Isolation</title>
      <link href="mysql-isolation.html"/>
      <url>mysql-isolation.html</url>
      
        <content type="html"><![CDATA[<p>今天复习了一下 MySQL 的隔离级别，SQL 标准的事务隔离级别包括：</p><ul><li>读未提交（read uncommitted）：一个事务还没提交时，事务中所做的改动就能被其他事务看到。</li><li>读提交（read committed）：一个事务提交之后，事务中所做的改动才会被其他事务看到。</li><li>可重复读（repeatable read）：一个事务执行过程中所看到的数据与这个事务开始时看到的数据始终一致。未提交时该事务所做的改动其他事务也无法看到。</li><li>串行化（serializable）：对于用一行记录同一时刻只能有一个人操作，读操作会加读锁，写操作会加写锁，遇到锁冲突时，后访问的事务需要等前一个事务提交之后方可继续执行。</li></ul><p>MySQL 和 PostgreSQL 的默认隔离级别都是「读提交（read committed）」，可以通过执行<br><code>show variables like &#39;transaction_isolation&#39;;</code> 来查看。</p>]]></content>
      
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cache Design Patterns</title>
      <link href="cache-design-patterns.html"/>
      <url>cache-design-patterns.html</url>
      
        <content type="html"><![CDATA[<p>一个项目中之前缓存的设计有一些缺陷，所以重新学习了一下缓存设计的一些常见套路，准备重新设计一下项目中的缓存方案。</p><h2 id="Cache-Aside"><a href="#Cache-Aside" class="headerlink" title="Cache Aside"></a>Cache Aside</h2><p>一种比较常见的缓存模式。</p><ol><li>数据读取策略</li></ol><ul><li>应用先向缓存服务请求数据；</li><li>如果有，直接返回数据给请求方；</li><li>如果没有，则去数据库中查询结果并返回给请求方；</li><li>应用更新数据到缓存中。</li></ul><ol start="2"><li>数据更新策略</li></ol><ul><li>应用先更新数据库；</li><li>应用再令缓存失效。</li></ul><p><img src="/images/cache-aside.png"></p><a id="more"></a><p><strong>注意</strong> 这里一定要先更新数据库再令缓存失效，不然可能出现数据不一致的情况。比如进程 A 更新数据，先令缓存失效了这时进程 B 来读缓存发现没有去数据库中拿数据，此时数据库还没有更新这是 B 进程拿到的就是旧数据并且写入到缓存中。</p><h2 id="Read-Through"><a href="#Read-Through" class="headerlink" title="Read Through"></a>Read Through</h2><p>用来处理读取数据的场景，应用只能看到缓存服务，数据库对应用来说是透明的。</p><h3 id="数据读取策略"><a href="#数据读取策略" class="headerlink" title="数据读取策略"></a>数据读取策略</h3><ul><li>应用向缓存服务请求数据；</li><li>如果有，直接返回数据给请求方；</li><li>如果没有，缓存服务查询数据库，并更新缓存；</li><li>缓存服务将数据返回请求方。</li></ul><h2 id="Write-Through"><a href="#Write-Through" class="headerlink" title="Write Through"></a>Write Through</h2><p>用来处理数据更新的场景。</p><h3 id="数据更新策略"><a href="#数据更新策略" class="headerlink" title="数据更新策略"></a>数据更新策略</h3><ul><li>应用向缓存服务发出写请求；</li><li>如果有，缓存服务先更新缓存中数据，再更新数据库；</li><li>如果没有，缓存服务直接更新数据库；</li><li>缓存服务告知应用更新完成。</li></ul><p><img src="/images/read-write-through.png"></p><h2 id="Write-Back"><a href="#Write-Back" class="headerlink" title="Write Back"></a>Write Back</h2><p>在更新数据的时候，只更新缓存，不更新数据库。缓存服务异步批量地更新数据库。这样就可以拥有较大的请求吞吐能力，也不用担心数据库短时间无法访问，但是缺点也很明显，数据不是强一致的且容易丢失。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cache </tag>
            
            <tag> programing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective go 笔记-01</title>
      <link href="effective-go-notes-01.html"/>
      <url>effective-go-notes-01.html</url>
      
        <content type="html"><![CDATA[<p>想要写好 Go 代码不仅需要理解 Go 的特性和风格，还需要了解 Go 的命名、格式化以及项目结构等约定。</p><h2 id="格式化（Formatting）"><a href="#格式化（Formatting）" class="headerlink" title="格式化（Formatting）"></a>格式化（Formatting）</h2><p>Go 使用 <code>go fmt</code> 格式化代码，这样开发者就不用纠结诸如缩进等问题了</p><p>before:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span> <span class="comment">// name of the object</span></span><br><span class="line">    value <span class="keyword">int</span> <span class="comment">// its value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>after:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    name    <span class="keyword">string</span> <span class="comment">// name of the object</span></span><br><span class="line">    value   <span class="keyword">int</span>    <span class="comment">// its value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="注释（Commentary）"><a href="#注释（Commentary）" class="headerlink" title="注释（Commentary）"></a>注释（Commentary）</h2><p>每个 package 最好都有一个 <code>package comment</code>，对于有多个文件的 package 只需要在其中一个文件中加入 <code>package comment</code> 就可以了。</p><ul><li>多行注释</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Package regexp implements a simple library for regular expressions.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The syntax of the regular expressions accepted is:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    regexp:</span></span><br><span class="line"><span class="comment">        concatenation &#123; &#x27;|&#x27; concatenation &#125;</span></span><br><span class="line"><span class="comment">    concatenation:</span></span><br><span class="line"><span class="comment">        &#123; closure &#125;</span></span><br><span class="line"><span class="comment">    closure:</span></span><br><span class="line"><span class="comment">        term [ &#x27;*&#x27; | &#x27;+&#x27; | &#x27;?&#x27; ]</span></span><br><span class="line"><span class="comment">    term:</span></span><br><span class="line"><span class="comment">        &#x27;^&#x27;</span></span><br><span class="line"><span class="comment">        &#x27;$&#x27;</span></span><br><span class="line"><span class="comment">        &#x27;.&#x27;</span></span><br><span class="line"><span class="comment">        character</span></span><br><span class="line"><span class="comment">        &#x27;[&#x27; [ &#x27;^&#x27; ] character-ranges &#x27;]&#x27;</span></span><br><span class="line"><span class="comment">        &#x27;(&#x27; regexp &#x27;)&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> regexp</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>单行注释</li></ul><p>如果一个包非常简单那么可以用单行注释来简单说明一下这个包的作用。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package path implements utility routines for</span></span><br><span class="line"><span class="comment">// manipulating slash-separated filename paths.</span></span><br></pre></td></tr></table></figure><p>在一个包中，任何紧接在顶层声明之前的注释都可以作为该声明的文档注释。每一个对外暴露的方法（首字母大写的方法）都应该有相应的注释。文档注释最好是完整的句子，第一句话应该是单句的摘要，以所声明的名称开头。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compile parses a regular expression and returns, if successful,</span></span><br><span class="line"><span class="comment">// a Regexp that can be used to match against text.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Compile</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="params">(*Regexp, error)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>使用文档注释可以方便我们检索文档，找到对应包下的某个方法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go doc -all regexp | grep -i parse</span></span><br><span class="line">    Compile parses a regular expression and returns, if successful, a Regexp</span><br><span class="line">    MustCompile is like Compile but panics if the expression cannot be parsed.</span><br><span class="line">    parsed. It simplifies safe initialization of global variables holding</span><br><span class="line"><span class="meta">$</span></span><br></pre></td></tr></table></figure><p>可以使用一条简单文档注释来对一组声明进行注释。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Error codes returned by failures to parse an expression.</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    ErrInternal      = errors.New(<span class="string">&quot;regexp: internal error&quot;</span>)</span><br><span class="line">    ErrUnmatchedLpar = errors.New(<span class="string">&quot;regexp: unmatched &#x27;(&#x27;&quot;</span>)</span><br><span class="line">    ErrUnmatchedRpar = errors.New(<span class="string">&quot;regexp: unmatched &#x27;)&#x27;&quot;</span>)</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>分组有可以表示出元素之间的关系，比如一组变量是由一个 <code>mutex</code> 保护。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    countLock   sync.Mutex</span><br><span class="line">    inputCount  <span class="keyword">uint32</span></span><br><span class="line">    outputCount <span class="keyword">uint32</span></span><br><span class="line">    errorCount  <span class="keyword">uint32</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="命名规范（Naming-conventions）"><a href="#命名规范（Naming-conventions）" class="headerlink" title="命名规范（Naming conventions）"></a>命名规范（Naming conventions）</h2><p>命名不仅仅在 Go 中很重要在其他语言中也很重要，在 Go 中它甚至会有语义上的影响：一个名字在包外的可见性取决于它的第一个字符是否是大写的。</p><h3 id="Package-names"><a href="#Package-names" class="headerlink" title="Package names"></a>Package names</h3><p>当导入一个 package 之后这个 package 的名字将成为你调用它内容的访问器</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;bytes&quot;</span></span><br><span class="line"></span><br><span class="line">bytes.Buffer</span><br></pre></td></tr></table></figure><p>好的 package 名称应该是「简短且易于理解的」，通常来说 package 名称应该是：</p><ul><li>小写的单字名称且不应使用下划线或驼峰记法</li><li>package 名称是源目录最里层的名称，比如： src/encoding/base64 package 名称是 base64</li></ul><p>package 名称可以简化其内部内容的命名，比如 buffered reader type 在 <code>bufio</code> package 中只叫 <code>Reader</code> 而不是 <code>BufReader</code>，因为使用者是这样引用的 <code>bufio.Reader</code>，这已经足够清晰且简洁地表达意图了。且 <code>bufio.Reader</code> 也不会和 <code>io.Reader</code> 混淆，因为可以通过 package 名称进行区分。再比如用来创建 <code>ring.Ring</code> 对象的方法可以是 <code>ring.NewRing</code> 更简洁一点可以直接是 <code>ring.New</code> 应为 package 名称刚好也是「ring」。另一个简洁的命名是 <code>once.Do(setup)</code> 其可读性已经很好，使用 once.DoOrWaitUntilDone(setup) 并不会使其变得更好。长命名并不会使其变得更容易理解。一份有用的说明文档通常比额外的长名字更有价值。</p><h3 id="存取器（Getters-and-Setters）"><a href="#存取器（Getters-and-Setters）" class="headerlink" title="存取器（Getters and Setters）"></a>存取器（Getters and Setters）</h3><p>Go 没有对存取器提供自动的支持，需要我们手动添加。假设你有一个对象</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">  owner <span class="keyword">string</span></span><br><span class="line">  color <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 owner getter 的命名，叫 <code>Owner()</code> 就很好，对于 owner setter 的命名可以是 <code>SetOwner()</code>。</p><h3 id="接口命名（interface-names）"><a href="#接口命名（interface-names）" class="headerlink" title="接口命名（interface names）"></a>接口命名（interface names）</h3><p>按照约定，只包含一个方法的接口应当以该方法的名称加上 -er 后缀来命名，如 Reader、Writer、 Formatter、CloseNotifier 等。</p><h3 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h3><p>最后，Go 中约定使用驼峰记法 MixedCaps 或 mixedCaps 的方式来对多单词名称进行命名。</p><h2 id="分号（Semicolons）"><a href="#分号（Semicolons）" class="headerlink" title="分号（Semicolons）"></a>分号（Semicolons）</h2><p>Go 虽然也是使用分号来结束语句，但是不需要在源码中手动输入，词法分析器会自动加上分号。如果在一行中写多个语句，需要用分号隔开。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init statement</span></span><br><span class="line"><span class="comment">// condition expression</span></span><br><span class="line"><span class="comment">// post statement</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num := <span class="number">9</span>; num &lt; <span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(num, <span class="string">&quot;is negative&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能将一个控制结构（if、for、switch 或 select）的左打括号不能另起一行因为词法分析器会在大括号前面插入分号，这可能引起不需要的效果。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 应该是：</span></span><br><span class="line"><span class="keyword">if</span> i &lt; f() &#123;</span><br><span class="line">    g()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 而不是：</span></span><br><span class="line"><span class="keyword">if</span> i &lt; f()  <span class="comment">// wrong!</span></span><br><span class="line">&#123;           <span class="comment">// wrong!</span></span><br><span class="line">    g()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Reference: <a href="https://golang.org/doc/effective_go.html">Effective Go</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> programing </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云轻量应用服务器 SSH 配置</title>
      <link href="tencent-lighthouse-get-started.html"/>
      <url>tencent-lighthouse-get-started.html</url>
      
        <content type="html"><![CDATA[<p>今年双十一在腾讯云买了一台 1 核 2 G 3M 的轻量应用服务器，3 年 253 感觉做一些简单的服务和测试应该够用了。记录一下通过 SSH 连接轻量云服务器的步骤。</p><h2 id="重制密码"><a href="#重制密码" class="headerlink" title="重制密码"></a>重制密码</h2><ol><li>登陆服务控制台</li><li>在服务器列表中找到相应的实例</li><li>关机</li><li>在「实例信息」栏中点击「重置密码」</li></ol><h2 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h2><ol><li>登录轻量应用服务器控制台，并单击左侧导航栏中的「密钥」</li><li>在密钥列表页面，单击「创建密钥」</li><li>在弹出的「创建SSH密钥」窗口中，设置密钥的所属地域，选择密钥的创建方式，单击「确定」</li><li>在密钥列表选择要绑定的 ssh 密钥，单击「绑定/解绑实例」</li><li>下载密钥文件到本地<a id="more"></a><h2 id="配置-ssh"><a href="#配置-ssh" class="headerlink" title="配置 ssh"></a>配置 ssh</h2></li></ol><p>修改 ssh 配置文件 <code>~/.ssh/config</code> 增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host light</span><br><span class="line">    HostName 「公网 IP」</span><br><span class="line">    port 22</span><br><span class="line">    User 「用户名」</span><br><span class="line">    IdentityFile 「密钥文件路径」</span><br><span class="line">    TCPKeepAlive yes</span><br><span class="line">    ForwardAgent yes</span><br></pre></td></tr></table></figure><h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p>更新好 ssh 配置文件之后即可通过命令行登陆到服务器 <code>ssh light</code></p><p>从购买到配置整体感觉比阿里云更容易上手，指引也更明确。</p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
